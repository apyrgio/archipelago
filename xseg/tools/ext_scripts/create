#!/usr/bin/env python
#
# Copyright (C) 2011 Greek Research and Technology Network
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

"""Create a new rbd Image inside a RADOS cluster

This program creates a new rbd Image file inside a RADOS cluster.
It takes it's input from environment variables. Specifically the
following variables should be present:

 - VOL_NAME: The name of the new Image file
 - POOL:     The RADOS pool in which to put the Image
 - VOL_SIZE: The size of the new Image (in megabytes)

Returns O after successfull creation, 1 on failure

"""

import os
import sys

from ganeti import utils


def ReadEnv():
  """Read the mandatory enviromental variables

  """
  name = os.getenv("VOL_NAME")
  if name is None:
    sys.stderr.write('The environment variable VOL_NAME is missing.\n')
    sys.exit(1)
#  pool = os.getenv("POOL")
  pool = "rbd"
  if pool is None:
    sys.stderr.write('The environment variable POOL is missing.\n')
    sys.exit(1)
  size = os.getenv("VOL_SIZE")
  if size is None:
    sys.stderr.write('The environment variable VOL_SIZE is missing.\n')
    sys.exit(1)
  test_param = os.getenv("EXTP_TEST")
  if test_param:
    sys.stderr.write('parameter test = %s\n' % test_param)
  origin = os.getenv("EXTP_ORIGIN")

  return (name, pool, size, origin)


def main():
  sys.stderr.write('Creation started...\n')
  env = ReadEnv()
  if env is None:
    sys.stderr.write('Wrong environment. Aborting...\n')
    sys.exit(1)

  rbd_name, rbd_pool, size, origin = env

  sys.stderr.write('name: %s, pool: %s, size: %s\n' % (rbd_name, rbd_pool, size))
  cmd = ["/root/archip/xseg/tools/vlmc", "create", "-p", "%s" % rbd_pool,
         "%s" % rbd_name, "--size", "%s" % size]
  if origin:
     cmd.extend(["--snap", origin])
  sys.stderr.write('Before RunCmd')
  result = utils.RunCmd(cmd)
  sys.stderr.write('After RunCmd')
  if result.failed:
    sys.stderr.write('rbd creation failed (%s): %s\n' %
                     (result.fail_reason, result.output))
    sys.exit(1)

  sys.exit(0)


if __name__ == "__main__":
    sys.exit(main())
