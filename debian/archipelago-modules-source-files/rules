#!/usr/bin/make -f
# Copyright (C) 2002-2006 Flavio Stanchina
# Licensed under the GNU General Public License, version 2.
# Adapted from nvidia-kernel-src.

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1


#baseepoch := $(shell expr $(KDREV) : '\([0-9]*\):.*' 2>/dev/null )
#ifneq ($(baseepoch),)
#      EPOCH=$(baseepoch):
#endif
#REV := $(shell expr $(KDREV) : '[0-9]*:\(.*\)' 2>/dev/null)
#ifeq ($(REV),)
#     REV=$(KDREV)
#endif

export VERSION := $(shell head -n 1 debian/changelog | sed -r 's/.*([0-9]+\.[0-9]+.*)-[0-9]+.*/\1/g')
export RAW_VERSION := $(shell echo $(VERSION) | sed 's/~//g')
export PKG_VERSION := $(shell head -n 1 debian/changelog | sed -r 's/.*([0-9]+\.[0-9]+.*-[0-9]+).*/\1/g')

# determine fglrx-source package version and warn user if it doesn't match
SRC_PKG_VERSION := $(shell dpkg -s archipelago-modules-source | grep '^Version:' | cut -d' ' -f2)
ifneq ($(SRC_PKG_VERSION),$(PKG_VERSION))
$(warning *** the unpacked source ($(VERSION)) doesnt match the archipelago-modules-source package ($(SRC_PKG_VERSION)))
$(warning *** if this is not what you want, erase $(CURDIR) and start over)
endif

# if you need to redefine these
KSRC  := $(KSRC)
KVERS := ${KVERS}

export KVER=$(KVERS)
ifeq ($(CHANGES_FILE),)
export CHANGES_FILE="../../archipelago-modules_$(VERSION)_amd64.changes"
endif

configure: configure-stamp

configure-stamp:
	if [ -f $(CURDIR)/debian/control.in ]; then \
		sed -e 's/#KVERS#/$(KVERS)/g' -e 's/#VERSION#/$(RAW_VERSION)/g' \
			debian/control.in > $(CURDIR)/debian/control ; \
	fi
	dh_testdir
	touch configure-stamp

build: configure-stamp
	dh_testdir
	$(MAKE) -C xseg XSEG_DOMAIN_TARGETS="kernel"

install: build
	dh_testdir
	dh_testroot
	dh_prep
	rm -f $(CURDIR)/debian/control $(CURDIR)/debian/install
	sed -e 's/#KVERS#/$(KVERS)/g' -e 's/#VERSION#/$(RAW_VERSION)/g' \
		debian/control.in > $(CURDIR)/debian/control
	sed -e 's/#KVERS#/$(KVERS)/g' debian/install.in \
		> $(CURDIR)/debian/archipelago-modules-$(KVERS).install
	$(MAKE) -C xseg XSEG_DOMAIN_TARGETS="kernel" install DESTDIR="$(CURDIR)/debian/tmp"
	dh_installdirs
	dh_install

binary_modules: build install
	dh_testdir
	dh_testroot
	dh_installdocs
	dh_installmodules
	dh_installchangelogs
	dh_link
	dh_strip
	dh_compress
	dh_fixperms
	dh_installdeb
	dh_gencontrol -- -v$(PKG_VERSION)
	dh_md5sums
ifdef KPKG_DEST_DIR
	dh_builddeb --destdir=$(KPKG_DEST_DIR)
	dpkg-genchanges -b -u$(KPKG_DEST_DIR) > $(CHANGES_FILE)
else
	dh_builddeb --destdir=$(CURDIR)/../..
	dpkg-genchanges -b -u$(CURDIR)/../.. > $(CHANGES_FILE)
endif

clean:
	dh_testroot
	rm -f configure-stamp
	dh_clean
	rm -f $(CURDIR)/debian/control
	rm -f $(CURDIR)/debian/dirs

# The kdist_configure target is called by make-kpkg modules_config. It
# should configure the module so it is ready for compilation (mostly
# useful for calling configure)
kdist_config: configure

kdist_configure: configure


# the kdist_image target is called by make-kpkg modules_image. It is
# responsible for compiling the module and creating the package. It
# should also clean up after making the module. Please note we use a
# separate binary_modules target to make testing the package building
# easier
kdist_image:
	$(ROOT_CMD) $(MAKE) $(MFLAGS) -f debian/rules binary_modules


# the kdist_clean target is called by make-kpkg modules_clean. It is
# responsible for cleaning up any changes that have been made by the
# other kdist_commands (except for the .deb files created).
kdist_clean:
	$(ROOT_CMD) $(MAKE) $(MFLAGS) -f debian/rules clean

kdist: kdist_clean kdist_image
	dpkg-genchanges -b -u$(KPKG_DEST_DIR) > $(CHANGES_FILE)
	-debsign -m"$(KMAINT)" $(CHANGES_FILE)

.PHONY: configure build install binary_modules clean kdist_config kdist_configure kdist_image kdist_clean kdist

